  Описание приложения - Прогноз погоды.
Исп. шаблон: Веб-приложение ASP.NET Core SPA Angular.
Шаблон эквивалентен созданию проекта ASP.NET Core, который действует как серверная часть API, и проекта Angular CLI, выступающего в качестве пользовательского интерфейса.
Версия dotnet: 3.1.301.

Предназначение:
Тестовое задание в компанию РОСТЕЛЕКОМ на вакансию "FullStack разработчик".
Ссылка на вакансию: https://spb.hh.ru/vacancy/38088764

Тескт задания:
Реализовать web-приложение, которое представляет следующие возможности:
0. По средствам любого находящегося в свободном доступе API получает доступ к данным о прогнозе погоды для произвольного местоположения, запросы к стороннему API реализовать с серверной стороны.
1. Отображает график динамики параметров (температура, влажность, скорость ветра и т.п.) за произвольный период времени.
2. Выводит на график только выбранные пользователем (в т.ч. и мультивыбор) параметры (температура, влажность, скорость ветра и т.п.)
3. Выводит на график данные за заданный пользователем, через календарь, произвольный интервал времени.
Важно: Сервер реализовать на ASP .Core С#

Описание API:
Исп. API для получения данных о прогнозе погод.
Позволяет получать данные о прогнозе погоды несколькими методами:
1) по наименованию города
2) по идентификатору города
3) по географическим координатам
Кроме того есть возможность запрашивать данные о нескольких города попадаюих в область, заданную четырёхугольником или кругом, создавать температурные карты и запрашивать исторические данные с 40 метеостанций расположенных по всему миру.
Описание API: https://openweathermap.org/api

Состав решения:
1) серверная часть: принимает запросы со стороны клиента, делегирует их к погодному API по средству HTTP-протокола, для связи с клиентом исп. WebAPI.Core-контроллер.
2) клиентская часть: предоставляет пользовательский интерфейс, описанный в тексте задания.

Серверная часть.
  
  Приложения ASP.NET Core настраивают и запускают узел. 
  Начальной точкой входа в приложение служит класс Program.cs.
  Узел отвечает за запуск приложения и управление временем существования. 
  Узел настраивает как минимум сервер и конвейер обработки запросов. 
  Узел также может настроить ведение журнала, внедрение зависимостей и конфигурацию.

        public static void Main(string[] args)
        {
            CreateHostBuilder(args).Build().Run();
        }

        public static IHostBuilder CreateHostBuilder(string[] args) =>
            Host.CreateDefaultBuilder(args)
                .ConfigureWebHostDefaults(webBuilder =>
                {
                    webBuilder.UseStartup<Startup>();
                });

  Метод CreateDefaultBuilder создаёт обьект реализующий интерфейс IHostBuilder.
  Вообще шаблон Builder имеет применение не только для работы с параметрами конфигурации обьектов, так же я наблюдал его применение в библиотеках предоставляющих функциональность
для создания форматированных документов.
  Метод Build() возвращает хост с опредлённой конфигурацией, далее вызывается метод Run().

  Класс Startup.cs содержит 2 метода:
1) ConfigureServices - настраивает службы приложения;
   Singleton - служба создаёт один раз при запуске приложения, регистрируются при помощи метода AddSingleton
   Scoped - создаются каждый раз при поступлении нового запроса.
   Transient - создаюится при каждом обращении к сервису

2) Configure - настраивает конвейер обработки запросов;

  При настройки конвеера обработки запросов важно учитывать порядок подключения компонентов Middleware.
Рассмотрим метод: ConfigureServices(), в него передаётся ссылка на обьект IServiceCollection, из Host созданного в классе Program.cs.
AddControllersWithViews() - добавляет поддержку контроллеров, функций, связанных с API, и представлений

След. вызов: 
В продакшэн файлы Angular будут обслуживаться из этого каталога.
services.AddSpaStaticFiles(configuration =>
{
    configuration.RootPath = "ClientApp/dist";
});
Принципе приложение может работать и без этого.

Далее метод Configure() - выполняет настройку конвеера обработки запросов, фактически принимает 2 аргумента
  IApplicationBuilder - предоставляет механизмы для настройки конвейера запросов приложения.
  IWebHostEnvironment - предоставляет информацию о среде веб-хостинга, в которой работает приложение.
Т.е. в этот реализует логику настройки конвеера в зависимости от конфигурации окружения.

Компоненты Middleware - принимают в конструктор обьект RequestDelegate, реализующую функцию обработки запроса и в методе InvokeAsync последовательно передают друг другу HttpContext.
public async Task InvokeAsync(HttpContext context)
{
            var token = context.Request.Query["token"];
            if (string.IsNullOrWhiteSpace(token))
            {
                context.Response.StatusCode = 403;
            }
            else
            {
                await _next.Invoke(context);
            }
}
Такие компоненты подключаются через AppBuilder методом app.UseMiddleware(), либо просто через метод Run передать функцию обработки;

В данном методе первоочередным подключается компонент отвечающий за обработку ошибок:
Во время выполнения в среде разработки подключается страницу обработки ошибок, определнной в пакете Microsoft.AspNetCore.Diagnostics.
    if (env.IsDevelopment())
    {
        app.UseDeveloperExceptionPage(); 
        app.UseDatabaseErrorPage();
    }
    else
    {
        app.UseExceptionHandler("/Error");
        app.UseHsts();
    }

// UseSpa - подключает компонент, который обрабатывает запросы и подключает страницу клиентского приложения.
app.UseSpa(spa =>
            {
                spa.Options.SourcePath = "ClientApp";
                if (env.IsDevelopment())
                {
                    spa.UseAngularCliServer(npmScript: "start");
                }
            });


=======================================================================================================================================
Полная схема конвеера обработки запросов:
app.UseHttpsRedirection() - настраивает перенаправление запросов с Http на Https.
app.UseStaticFiles(); - подключает компонент предоставляющий доступ к файлам, директории "/StaticFiles"

Метод Startup.Configure добавляет компоненты ПО промежуточного слоя для распространенных сценариев приложений:
Обработка исключений/ошибок

Когда приложение выполняется в среде разработки:
ПО промежуточного слоя страницы исключений для разработчика (UseDeveloperExceptionPage) сообщает об ошибках среды выполнения приложения.
ПО промежуточного слоя страницы исключений для базы данных сообщает об ошибках среды выполнения базы данных.

Когда приложение выполняется в рабочей среде:
ПО промежуточного слоя обработчика исключений (UseExceptionHandler) перехватывает исключения, возникшие в указанном ниже ПО промежуточного слоя.
ПО промежуточного слоя протокола HTTP Strict Transport Security Protocol (HSTS) (UseHsts) добавляет заголовок Strict-Transport-Security.
ПО промежуточного слоя перенаправления HTTPS (UseHttpsRedirection) перенаправляет запросы с HTTP на HTTPS.
ПО промежуточного слоя статических файлов (UseStaticFiles) возвращает статические файлы и сокращает дальнейшую обработку запросов.
ПО промежуточного слоя политики файлов cookie (UseCookiePolicy) обеспечивает соответствие приложения нормам 
  Общего регламента по защите данных (GDPR) ЕС.
ПО промежуточного слоя маршрутизации (UseRouting) для маршрутизации запросов.
ПО промежуточного слоя проверки подлинности (UseAuthentication) пытается проверить подлинность пользователя, прежде чем предоставить ему доступ к защищенным ресурсам.
ПО промежуточного слоя авторизации (UseAuthorization) разрешает пользователю доступ к защищенным ресурсам.
ПО промежуточного слоя сеанса (UseSession) устанавливает и поддерживает состояние сеанса. Если в приложении используется состояние сеанса, вызовите ПО промежуточного слоя сеанса после ПО промежуточного слоя политики файлов cookie и до ПО промежуточного слоя MVC.
ПО промежуточного слоя маршрутизации конечных точек (UseEndpoints с MapRazorPages) для добавления конечных точек Razor Pages в конвейер запросов.

    if (env.IsDevelopment())
    {
        app.UseDeveloperExceptionPage();
        app.UseDatabaseErrorPage();
    }
    else
    {
        app.UseExceptionHandler("/Error");
        app.UseHsts();
    }

    app.UseHttpsRedirection();
    app.UseStaticFiles();
    app.UseCookiePolicy();
    app.UseRouting();
    app.UseAuthentication();
    app.UseAuthorization();
    app.UseSession();

    app.UseEndpoints(endpoints =>
    {
        endpoints.MapRazorPages();
    });
===========================================================================

 























