 Клиентская часть/ClientApp

Приложение использует компилятор angular/cli, который в свою очередь использует средство сборки 
  web-pack, 
  typescript-компилятор и 
  предпроцессор 'scss'- "диалект" языка SASS,
это метаязык на основе CSS, предназначенный для увеличения уровня абстракции CSS-кода 


Давайте рассмотрим структуру приложения:
Каталоги:
  e2e - директория с интеграционными тестами;
  node_modules - установленные npm-модули;
  src - исходные файлы;
  dist - скомпилированные файлы приложения

  angular.json - описание конфигурации;
  package.json - метаинформация и список необходимых npm-модулей 
  tsconfig.json - общая конфигурация typescript, данный использует омпилятор TypeScript, 
                  'es2015', 'es2017' используется более современными браузерами, более старыми используется 'es5'
  tslint.json - настройка tslint, средство проверки кода на соответвие правилам описанным в данном файле
  README.md - описание функционала программы

В каталоге node_modules\bin находятся инструменты доступные для вызова через команду 'npm run'



Структура каталога src:

app - модули, компоненты, сервисы, директивы и т.д;
assets - статический контент (изображения, аудио);
environments - конфигурации для каждой среды запуска;

  favicon.ico - иконка, отображаемая в верхней части вкладки браузера;
  index.html;

  karma.conf.js		- конфигурация protractor (для e2e-тестов);
  main.ts 		- главная точка входа в приложение
  polyfills.ts		- список модулей, подключаемых для поддержки кроссбраузерности;
  styles.css		- описание действующих глобально стилей;
  test.ts		- отвечает за поиск и загрузку тестов при их запуске;
  tsconfig.app.json	- настройка typescript;
  tsconfig.spec.json	- настройка typescript при запуске unit-тестов.

Angular, как платформа.
Использует механизм внедрения зависимостей аналогичный .NetCore и механизм связывания данных представления с моделью данных.

Немного про типы обьектов Angular:
1) Сервисы - сервисы используются доля доступа к данным
2) Компоненты - компоненты определяют связь между моделью, представлением и событиями
3) Фильтры - выполняют преобразование данных
4) Директивы - директивы дополняют функционал, отличаются от компонентов, только тем что не работают с представлением.

Модульная структура проекта:
Главный модуль приложения - 
  AppModule - включает в себя компонент главной страницы AppComponent, меню навигации, и реализует свойства навигации внутри приложения.
     Так же включает компоненты реализующие функции приложения (страницы), в нашем случае это функции просмотра.
  AppComponent - определяет представление реализующее разметку главной страницы

  На данном этапе, я принципиально выполняю дальйнее разделение модулей приложения на 2 типа модулей:
1) Модули реализующие страницы приложения в нашем случае это страница просмотра текущих характеристик погодных условий для произвольного метоположения
2) Shared-модули - предоставляющие компоненты для страниц для повторного использования

  Для просмотра пронозов погоды отвечает модуль Forecast и переводится как прогноз, находится в каталоге src/app/forecast
Первым делом я описал сервис, предоставляющий информацию о погоде, т.к. он работает со службой Http, в модуль ForecastModule, я добавил модуль для работы с Http-протоколом
HttpClientModule, который предоставляет службу HttpClient для работы с протоколом.
  Для запроса данных с сервера используется 2 метода по аналогии с методами определнными в контроллере WeatherForecastController на стороне сервера.
компонент ForecastComponent, использует OpenWeatherService для получения данных о текущем состоянии погоды.







  


  

  










